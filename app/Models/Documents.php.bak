<?php

namespace App\Models;

use Ramsey\Uuid\Uuid;
use Illuminate\Support\Facades\Auth;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Notifications\Notifiable;
use App\Traits\Uuids;
use Illuminate\Database\Eloquent\Builder;

class Documents extends Model
{
    use HasFactory, SoftDeletes;
    use Notifiable, Uuids;

    const CREATED_AT = 'createdDate';
    const UPDATED_AT = 'modifiedDate';
    protected $table = 'documents';
    public $incrementing = false;

    protected $fillable = [
        'categoryId',
        'name',
        'description',
        'url',
        'createdBy',
        'modifiedBy',
        'isIndexed',
        'isDeleted',
        'location',
        'isPermanentDelete',
        'clientId',
        'statusId',
        'documentWorkflowId',
        'currentWorkflowStepId',
        'locationId',
        'rackId',
    ];

    protected $casts = [
        'isIndexed' => 'boolean',
        'isDeleted' => 'boolean',
        'isPermanentDelete' => 'boolean',
        'isWorkflowCompleted' => 'boolean',
    ];

    public function categories()
    {
        return $this->belongsTo(Categories::class, 'categoryId', 'id');
    }

    public function clients()
    {
        return $this->belongsTo(Clients::class, 'clientId', 'id');
    }

    public function docuementStatus()
    {
        return $this->belongsTo(DocumentStatus::class, 'statusId', 'id');
    }

    public function users()
    public function location()
    {
        return $this->belongsTo(Location::class, 'locationId', 'id');
    }

    public function rack()
    {
        return $this->belongsTo(Rack::class, 'rackId', 'id');
    }
    {
    public function location()
    {
        return $this->belongsTo(Location::class, 'locationId', 'id');
    }

    public function rack()
    {
        return $this->belongsTo(Rack::class, 'rackId', 'id');
    }
        return $this->belongsTo(Users::class, 'createdBy', 'id');
    public function location()
    {
        return $this->belongsTo(Location::class, 'locationId', 'id');
    }

    public function rack()
    {
        return $this->belongsTo(Rack::class, 'rackId', 'id');
    }
    }
    public function location()
    {
        return $this->belongsTo(Location::class, 'locationId', 'id');
    }

    public function rack()
    {
        return $this->belongsTo(Rack::class, 'rackId', 'id');
    }

    public function documentMetaDatas()
    {
        return $this->hasMany(DocumentMetaDatas::class, 'documentId');
    }

    public function documentComments()
    {
        return $this->hasMany(DocumentComments::class, 'documentId');
    }

    public function userNotifications()
    {
        return $this->hasMany(UserNotifications::class, 'documentId');
    }

    public function reminderSchedulers()
    {
        return $this->hasMany(ReminderSchedulers::class, 'documentId');
    }

    public function reminders()
    {
        return $this->hasMany(Reminders::class, 'documentId');
    }

    public function documentVersions()
    {
        return $this->hasMany(DocumentVersions::class, 'documentId');
    }

    public function documentUserPermissions()
    {
        return $this->hasMany(DocumentUserPermissions::class, 'documentId');
    }
    public function documentRolePermissions()
    {
        return $this->hasMany(DocumentRolePermissions::class, 'documentId');
    }

    public function documentAuditTrails()
    {
        return $this->hasMany(DocumentAuditTrails::class, 'documentId');
    }

    public function documentWorkflow()
    {
        return $this->belongsTo(DocumentWorkflow::class, 'documentWorkflowId', 'id');
    }
    public function currentStep()
    {
    return $this->belongsTo(WorkflowStep::class, 'currentStepId');
    }

    protected static function boot()
    {
        parent::boot();
        static::creating(function (Model $model) {
            $userId = Auth::parseToken()->getPayload()->get('userId');
            $model->createdBy = $userId;
            $model->modifiedBy = $userId;
            $model->setAttribute($model->getKeyName(), Uuid::uuid4());
        });
        static::updating(function (Model $model) {
            $userId = Auth::parseToken()->getPayload()->get('userId');
            $model->modifiedBy = $userId;
        });

        static::addGlobalScope('isDeleted', function (Builder $builder) {
            $builder->where('documents.isDeleted', '=', 0);
        });

        static::addGlobalScope('isPermanentDelete', function (Builder $builder) {
            $builder->where('documents.isPermanentDelete', '=', 0);
        });
    }

    public function scopeWithStatus(Builder $query, string $status): Builder
    {

        if ($status === 'Draft') { //tanpa w/f, tanpa role permission, tanpa user permission(termasuk createdBy)
            $createdById = auth()->id();

            $query = $query->whereDoesntHave('documentWorkflow')
                        ->where(function ($q) use ($createdById) {
                            $q->whereDoesntHave('documentUserPermissions', function ($sub) use ($createdById) {
                                $sub->where('userId', '!=', $createdById);
                            });
                        })
                        ->whereDoesntHave('documentRolePermissions');

        } elseif ($status === 'Completed (Shared)') { //tanpa w/f, tapi ada role permission dan user permission (selain createdBy)
            return $query->whereDoesntHave('documentWorkflow')
                        ->where(function($permissionQuery) {
                            $permissionQuery->whereHas('documentUserPermissions', function ($q) {
                                $q->whereColumn('userId', '!=', 'documents.createdBy');
                            })
                            ->orWhereHas('documentRolePermissions');
                        });

        } elseif ($status === 'Completed (Workflow)') { // ada w/f dan yang statusnya Completed
            return $query->whereHas('documentWorkflow', fn($workflowQuery) => $workflowQuery->where('status', 'Completed'));



        } elseif ($status === 'Rejected') { // ada w/f dan yang statusnya Cancelled
            return $query->whereHas('documentWorkflow', fn($workflowQuery) => $workflowQuery->where('status', 'Cancelled'));

        } elseif ($status === 'InProgress') { // ada w/f dan yang statusnya selain Completed & Cancelled
            return $query->whereHas('documentWorkflow', function ($workflowQuery) {
                $workflowQuery->where('status', '!=', 'Completed')->where('status', '!=', 'Cancelled');
            });
        }

        return $query;
    }
}
